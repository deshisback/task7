//Итеративно разработать приложение для работы со студентами.
//В рамках задания будут появляться новые требования.Необходимо иногда рефакторить код
//(см low coupling, strong cohesion, SOLID, KISS, YAGNI, DRY и тд) под специфику требований, увеличивая сопровождаемость на будущее.

//Этап 3
//У преподавателя есть настроение.От настроения преподавателя зависит оценка, которую он поставит студенту.Также на оценку влияет тот, 
// кому преподаватель ставит эту оценку.
//
//Пример формул расчёта итоговой оценки :
//хорошее настроение + отличник = 5
//плохое настроение + отличник = 4 или 5 (равновероятно)
//хорошее настроение + не отличник = 4
//плохое настроение + не отличник = 2 или 3 (равновероятно)

#include "Teacher.h"
#include <ctime>

using namespace std;

int main()
{

	srand(time(NULL));

	Teacher t("Georgiy", 28);
	t.SetMood("good");

	Student* s1 = new Student("Yakov", 19, "Progin");
	Student* s2 = new Student("Vokay", 19, "Progin");

	t.AddMarkToStudent(s1, "OOP", 5);
	t.SetMood("bad");
	for(int i = 0; i < 100; i++)
	{
		t.AddMarkToStudent(s1, "OOP", 5);
	}

	s1->PrintMarks();
}